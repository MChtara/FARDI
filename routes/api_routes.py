"""
API routes for the CEFR assessment game
"""
import random
import logging
from datetime import datetime
from flask import Blueprint, request, jsonify
from services.ai_service import AIService
from services.audio_service import AudioService
from services.assessment_service import AssessmentService
from utils.helpers import get_challenges_by_level, get_tips_by_level, get_xp_reward_by_level
from models.game_data import NPCS

logger = logging.getLogger(__name__)

# Create blueprint for API routes
api_bp = Blueprint('api', __name__)

# Initialize services
ai_service = AIService()
audio_service = AudioService()
assessment_service = AssessmentService()

@api_bp.route('/get-ai-feedback', methods=['POST'])
def get_ai_feedback():
    """API endpoint to get AI feedback on a response with detailed language assessment"""
    data = request.json
    question = data.get('question', '')
    response = data.get('response', '')
    speaker = data.get('speaker', 'Ms. Mabrouki')
    question_type = data.get('type', '')
    
    # Check if the response was generated by AI using Sapling
    is_ai, ai_score, ai_reasons = assessment_service.check_ai_response(response)
    
    # First, run a quick assessment to identify level and issues
    quick_assessment = assessment_service.assess_response(question, response, question_type)
    level = quick_assessment.get('level', 'B1')
    strengths = quick_assessment.get('specific_strengths', [])
    improvements = quick_assessment.get('specific_areas_for_improvement', [])
    
    # Add information about AI detection if necessary
    if is_ai:
        improvements = ["Your response appears to use AI-generated patterns"] + improvements
    
    # Create a coaching prompt based on assessment
    coaching_notes = ""
    if strengths and improvements:
        coaching_notes = f"""
        This response is approximately at CEFR level {level}.
        
        Strengths: {', '.join(strengths[:2])}
        
        Areas for improvement: {', '.join(improvements[:2])}
        
        {'This response shows characteristics typical of AI-generated content. ' if is_ai else ''}
        
        Give encouraging feedback that acknowledges these strengths and provides one brief suggestion related to the top area for improvement. Make it sound natural and conversational.
        """
    else:
        coaching_notes = f"""
        This response is approximately at CEFR level {level}.
        
        {'This response shows characteristics typical of AI-generated content. ' if is_ai else ''}
        
        Give encouraging feedback appropriate for this level. If it's a lower level (A1-A2), focus on praising their effort and encourage more vocabulary. If it's a mid level (B1), suggest using more complex sentences. If it's a higher level (B2-C1), praise their sophistication and encourage continuing this level of expression.
        """
    
    # Create a prompt based on the question, response and coaching notes
    prompt = f"""
    As {speaker}, you are providing feedback to a student in an English language learning game.

    Student's response to: "{question}"

    Their response: "{response}"

    {coaching_notes}

    CRITICAL FEEDBACK REQUIREMENTS:
    - Always check for basic capitalization errors, especially "i" instead of "I"
    - Check for inappropriate contractions in formal contexts
    - Point out professional English standards when needed
    - Use formal English in your own response (I am, do not, cannot - NO contractions)

    SPECIFIC ERRORS TO ALWAYS CATCH:
    - "i" instead of "I" → Must be corrected every time
    - Missing capitalization at sentence beginnings
    - Informal contractions in formal contexts: "i'm" → "I am", "don't" → "do not", "can't" → "cannot", "won't" → "will not", "shouldn't" → "should not", "couldn't" → "could not", "wouldn't" → "would not"
    - Missing punctuation

    IMPORTANT: Your response MUST BE IN ENGLISH ONLY, even if the student wrote in another language. This is an English language learning application.

    Your response should:
    1. Stay completely in character as {speaker}
    2. Be encouraging and supportive
    3. Be concise (2-3 sentences)
    4. ALWAYS correct "i" to "I" and contractions if you see these errors
    5. Include one brief, specific suggestion for improvement focusing on professional English
    6. Model correct formal English in your own response (use "I am", "do not", "cannot" etc.)
    7. End with a natural segue to the next part of the conversation
    8. ALWAYS RESPOND IN ENGLISH ONLY, regardless of what language the student used

    EXAMPLE CORRECTIONS:
    - If student writes "i am fine" → Say "Remember to always capitalize 'I' - it should be 'I am fine'"
    - If student writes "i'm happy" → Say "Great! Just remember to capitalize 'I' and use 'I am' instead of 'I'm' for more formal writing"
    - If student writes "i don't know" → Say "Good effort! Remember to capitalize 'I' and use 'do not' instead of 'don't' - so 'I do not know'"
    """
    
    ai_response = ai_service.get_ai_response(prompt, speaker)
    
    # Also return assessment data for UI features
    return jsonify({
        "ai_response": ai_response,
        "assessment": {
            "level": level,
            "strengths": strengths[:2] if strengths else [],
            "improvements": improvements[:2] if improvements else [],
            "ai_generated": is_ai,
            "ai_score": ai_score,
            "ai_reasons": ai_reasons[:3] if ai_reasons else []
        }
    })

@api_bp.route('/language-tips', methods=['GET'])
def language_tips():
    """API endpoint to get personalized language tips based on assessment history"""
    level = request.args.get('level', 'B1')

    # Get tips appropriate for the user's level
    selected_tips = get_tips_by_level(level)

    # Randomly select 2 tips to return
    tips_to_show = random.sample(selected_tips, min(2, len(selected_tips)))

    return jsonify({
        "level": level,
        "tips": tips_to_show
    })

@api_bp.route('/next-challenge', methods=['GET'])
def next_challenge():
    """API endpoint to get a bonus challenge based on the user's current level"""
    level = request.args.get('level', 'B1')

    # Get challenges for the selected level
    selected_challenges = get_challenges_by_level(level)

    # Randomly select a challenge
    challenge = random.choice(selected_challenges)
    xp_reward = get_xp_reward_by_level(level)

    return jsonify({
        "level": level,
        "challenge": challenge,
        "xp_reward": xp_reward
    })

@api_bp.route('/check-ai-response', methods=['POST'])
def check_ai_response():
    """API endpoint to check if a response is AI-generated before submission"""
    try:
        data = request.json
        response_text = data.get('response', '')
        
        logger.info(f"Checking AI for text: {response_text[:100]}...")
        
        if len(response_text.strip()) < 20:
            return jsonify({
                "is_ai": False,
                "score": 0,
                "message": "Response too short for AI detection",
                "reasons": []
            })
        
        # Use AI service to check for AI-generated content
        is_ai, ai_score, ai_reasons = assessment_service.check_ai_response(response_text)
        
        logger.info(f"AI Detection result - is_ai: {is_ai}, score: {ai_score}")
        
        return jsonify({
            "is_ai": is_ai,
            "score": ai_score,
            "message": f"AI detection score: {ai_score:.0%}",
            "reasons": ai_reasons[:3] if ai_reasons else []
        })
        
    except Exception as e:
        logger.error(f"ERROR in check_ai_response: {str(e)}")
        return jsonify({
            "is_ai": False,
            "score": 0,
            "message": "Error in AI detection",
            "reasons": []
        }), 200  # Return 200 to allow continuation in case of error

@api_bp.route('/generate-audio', methods=['POST'])
def api_generate_audio():
    """API endpoint to generate audio from text using Edge TTS"""
    data = request.json
    text = data.get('text', '')
    voice = data.get('voice', 'en-US-ChristopherNeural')
    filename = data.get('filename', f'custom_{int(datetime.now().timestamp())}.mp3')

    if not text:
        return jsonify({"error": "No text provided"}), 400

    try:
        audio_url = audio_service.generate_custom_audio(text, filename, voice)
        return jsonify({
            "success": True,
            "audio_url": audio_url
        })
    except Exception as e:
        logger.error(f"Error generating audio: {str(e)}")
        return jsonify({"error": str(e)}), 500